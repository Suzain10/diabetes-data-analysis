# -*- coding: utf-8 -*-
"""Diabetes_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lyQM-pStS0ozihdSNVrr0i3XNwaFbYAR
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns

df=pd.read_csv("diabetes.csv")
df

df.info()

zeroes_count = (df == 0).sum()

print("Total zeroes in each column:")
print(zeroes_count)

df['Glucose'].replace(0,np.nan, inplace=True)
zeros =(df['Glucose']==0).sum()
zeros

average_glucose = df.loc[df['Outcome'] == 0, 'Glucose'].mean()
df.loc[(df['Outcome'] == 0) & (df['Glucose'].isnull()), 'Glucose'] = average_glucose

missing_count = df['Glucose'].isnull().sum()
print(missing_count)

average_glucose1 = df.loc[df['Outcome'] == 1, 'Glucose'].mean()
df.loc[(df['Outcome'] == 1) & (df['Glucose'].isnull()), 'Glucose'] = average_glucose1

missing_count = df['Glucose'].isnull().sum()
print(missing_count)

df['BloodPressure'].replace(0,np.nan, inplace=True)
zeros =(df['BloodPressure']==0).sum()
zeros

average_BP = df.loc[df['Age'] <= 45, 'BloodPressure'].mean()
df.loc[(df['Age'] <= 45) & (df['BloodPressure'].isnull()), 'BloodPressure'] = average_BP

missing_count1 = df['BloodPressure'].isnull().sum()
print(missing_count1)

average_BP1 = df.loc[df['Age'] > 45, 'BloodPressure'].mean()
df.loc[(df['Age'] > 45) & (df['BloodPressure'].isnull()), 'BloodPressure'] = average_BP1

missing_count = df['BloodPressure'].isnull().sum()
print(missing_count)

df.shape



mean_values_specific = df[[ 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction']].mean()

df[['SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction']] = df[[ 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction']].replace(0, mean_values_specific)

df.describe()

diabetes_counts = df['Outcome'].value_counts()


plt.figure(figsize=(8, 6))
diabetes_counts.plot(kind='bar', color=['blue', 'green'])
plt.title('Total Number of Diabetic vs Non-Diabetic Individuals')
plt.xlabel('Outcome')
plt.ylabel('Count')
plt.xticks([0, 1], ['Non-Diabetic', 'Diabetic'], rotation=0)
plt.grid(axis='y')
plt.show()

Pregnancies_counts = df['Pregnancies'].value_counts()
print(Pregnancies_counts)

plt.bar(Pregnancies_counts.index, Pregnancies_counts.values, color='skyblue')
plt.xlabel('Number of Pregnancies')
plt.ylabel('Frequency')
plt.title('Distribution of Pregnancies')
plt.show()

plt.figure(figsize=(8, 6))
df.boxplot(column='Age', by='Outcome', grid=False)
plt.title('Distribution of Age by Outcome')
plt.xlabel('Outcome')
plt.ylabel('Age')
plt.xticks([1, 2], ['No Diabetes (0)', 'Diabetes (1)'])
plt.show()

plt.figure(figsize=(10, 6))

plt.hist(df[df['Outcome'] == 0]['Age'], bins=20, alpha=0.5, label='No Diabetes')

plt.hist(df[df['Outcome'] == 1]['Age'], bins=20, alpha=0.5, label='Diabetes')

plt.title('Distribution of Age by Outcome')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.legend()
plt.show()

plt.figure(figsize=(8, 6))
df.boxplot(column='Pregnancies', by='Outcome', grid=False)
plt.title('Distribution of Pregnancies by Outcome')
plt.xlabel('Outcome')
plt.ylabel('Pregnancies')
plt.xticks([1, 2], ['No Diabetes (0)', 'Diabetes (1)'])
plt.show()

plt.figure(figsize=(10, 6))

plt.hist(df[df['Outcome'] == 0]['Pregnancies'], bins=20, alpha=0.5, label='No Diabetes')


plt.hist(df[df['Outcome'] == 1]['Pregnancies'], bins=20, alpha=0.5, label='Diabetes')

plt.title('Distribution of Pregnancies by Outcome')
plt.xlabel('Pregnancies')
plt.ylabel('Frequency')
plt.legend()
plt.show()

total_individuals = len(df)

diabetic_individuals = df[df['Outcome'] == 1]['Outcome'].count()


diabetes_prevalence = (diabetic_individuals / total_individuals) * 100

print("Overall Diabetes Prevalence:", diabetes_prevalence, "%")

labels = ['No Diabetes', 'Diabetes']
sizes = [total_individuals - diabetic_individuals, diabetic_individuals]
colors = ['lightblue', 'lightcoral']


plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title('Overall Diabetes Prevalence')
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(df['BMI'], bins=20, color='skyblue', edgecolor='black', alpha=0.7)
plt.title('BMI Distribution')
plt.xlabel('BMI')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))


plt.hist(df[df['Outcome'] == 0]['BMI'], bins=20, alpha=0.5, label='No Diabetes')

plt.hist(df[df['Outcome'] == 1]['BMI'], bins=20, alpha=0.5, label='Diabetes')

plt.title('Distribution of BMI by Diabetes Outcome')
plt.xlabel('BMI')
plt.ylabel('Frequency')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))


plt.hist(df[df['Outcome'] == 0]['Insulin'], bins=20, alpha=0.5, label='No Diabetes')

plt.hist(df[df['Outcome'] == 1]['Insulin'], bins=20, alpha=0.5, label='Diabetes')

plt.title('Distribution of Insulin Levels by Diabetes Outcome')
plt.xlabel('Insulin Levels')
plt.ylabel('Frequency')
plt.legend()
plt.show()

plt.figure(figsize=(8, 6))
plt.boxplot([df[df['Outcome'] == 0]['Insulin'], df[df['Outcome'] == 1]['Insulin']], labels=['No Diabetes', 'Diabetes'])
plt.title('Distribution of Insulin Levels by Diabetes Outcome')
plt.ylabel('Insulin Levels')
plt.show()

plt.figure(figsize=(10, 6))

plt.hist(df[df['Outcome'] == 0]['Pregnancies'], bins=20, alpha=0.5, label='No Diabetes')


plt.hist(df[df['Outcome'] == 1]['Pregnancies'], bins=20, alpha=0.5, label='Diabetes')

plt.title('Distribution of Number of Pregnancies by Diabetes Outcome')
plt.xlabel('Number of Pregnancies')
plt.ylabel('Frequency')
plt.legend()
plt.show()

plt.figure(figsize=(8, 6))
plt.boxplot([df[df['Outcome'] == 0]['Pregnancies'], df[df['Outcome'] == 1]['Pregnancies']], labels=['No Diabetes', 'Diabetes'])
plt.title('Distribution of Number of Pregnancies by Diabetes Outcome')
plt.ylabel('Number of Pregnancies')
plt.show()

plt.figure(figsize=(10, 6))

plt.hist(df[df['Outcome'] == 0]['DiabetesPedigreeFunction'], bins=20, alpha=0.5, label='No Diabetes')

plt.hist(df[df['Outcome'] == 1]['DiabetesPedigreeFunction'], bins=20, alpha=0.5, label='Diabetes')

plt.title('Distribution of Diabetes Pedigree Function by Diabetes Outcome')
plt.xlabel('Diabetes Pedigree Function')
plt.ylabel('Frequency')
plt.legend()
plt.show()

correlation_matrix = df.corr()

print("Correlation Matrix:")
print(correlation_matrix)

plt.figure(figsize=(6, 4))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

bins = [20, 30, 40, 50, 60, 70, 80, 90]
labels = ['20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80-89']


diabetic_counts = df[df['Outcome'] == 1].groupby(pd.cut(df[df['Outcome'] == 1]['Age'], bins=bins, labels=labels, right=False)).size()


total_counts = df.groupby(pd.cut(df['Age'], bins=bins, labels=labels, right=False)).size()

proportion_diabetic = diabetic_counts / total_counts

print("Proportion of diabetic individuals in each age group:")
print(proportion_diabetic)

plt.figure(figsize=(10, 6))
proportion_diabetic.plot(kind='bar', color='skyblue')
plt.title('Proportion of Diabetic Individuals in Each Age Group')
plt.xlabel('Age Group')
plt.ylabel('Proportion')
plt.xticks(rotation=45)
plt.show()

bmi = df['BMI']
glucose = df['Glucose']

plt.figure(figsize=(8, 6))
plt.scatter(bmi, glucose, alpha=0.5)
plt.title('Scatter Plot of BMI vs Glucose Levels')
plt.xlabel('BMI')
plt.ylabel('Glucose Levels')
plt.grid(True)
plt.show()

insulin = df['Insulin']
glucose = df['Glucose']

plt.figure(figsize=(8, 6))
plt.scatter(insulin, glucose, alpha=0.5)
plt.title('Scatter Plot of Insulin vs Glucose Levels')
plt.xlabel('Insulin Levels')
plt.ylabel('Glucose Levels')
plt.grid(True)
plt.show()

grouped = df.groupby(['Pregnancies', 'Outcome']).size().unstack()

grouped.plot(kind='bar', stacked=True, figsize=(10, 6))
plt.title('Stacked Bar Plot of Number of Pregnancies by Diabetes Outcome')
plt.xlabel('Number of Pregnancies')
plt.ylabel('Count')
plt.legend(title='Diabetes Outcome', labels=['No Diabetes', 'Diabetes'])
plt.xticks(rotation=45)
plt.show()

bmi = df['BMI']
skin_thickness = df['SkinThickness']

plt.figure(figsize=(8, 6))
plt.scatter(bmi, skin_thickness, alpha=0.5)
plt.title('Scatter Plot of BMI vs Skin Thickness')
plt.xlabel('BMI')
plt.ylabel('Skin Thickness')
plt.grid(True)
plt.show()

bmi = df['BMI']
skin_thickness = df['SkinThickness']

plt.figure(figsize=(8, 6))
plt.hexbin(bmi, skin_thickness, gridsize=30, cmap='Blues', edgecolors='none')
plt.colorbar(label='Count in Bin')
plt.title('Hexbin Plot of BMI vs Skin Thickness')
plt.xlabel('BMI')
plt.ylabel('Skin Thickness')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 8))
sns.scatterplot(x='Glucose', y='Age', hue='Outcome', data=df, palette='Set1', alpha=0.7)
plt.title('Relationship between Glucose, Age, and Outcome')
plt.xlabel('Glucose')
plt.ylabel('Age')
plt.legend(title='Outcome', labels=['No Diabetes', 'Diabetes'])
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 8))
sns.scatterplot(x='BMI', y='Age', hue='Outcome', data=df, palette='Set1', alpha=0.7)
plt.title('Relationship between BMI, Age, and Outcome')
plt.xlabel('BMI')
plt.ylabel('Age')
plt.legend(title='Outcome', labels=['No Diabetes', 'Diabetes'])
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 8))
sns.scatterplot(x='Pregnancies', y='Age', hue='Outcome', data=df, palette='Set1', alpha=0.7)
plt.title('Relationship between Pregnancies, Age, and Outcome')
plt.xlabel('Pregnancies')
plt.ylabel('Age')
plt.legend(title='Outcome', labels=['No Diabetes', 'Diabetes'])
plt.grid(True)
plt.show()

majority_age = df['Age'].mode()[0]

print("Majority age in the dataset:", majority_age)

majority_age = df['Age'].mode()[0]


majority_age_count = df['Age'].value_counts()[majority_age]

total_values = len(df)

percentage_majority_age = (majority_age_count / total_values) * 100

print("Total occurrences of majority age:", majority_age_count)
print("Total values in the 'Age' column:", total_values)
print("Percentage of occurrences of majority age out of total values: {:.2f}%".format(percentage_majority_age))

bins = [21, 30, 40, 50, 60, 70, 81]
labels = ['21-29', '30-39', '40-49', '50-59', '60-69', '70-81']

filtered_df = df[(df['Age'] >= 21) & (df['Age'] <= 81)]

filtered_df['AgeGroup'] = pd.cut(filtered_df['Age'], bins=bins, labels=labels, right=False)


age_group_counts = filtered_df['AgeGroup'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(age_group_counts, labels=age_group_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Individuals Across Age Groups (Ages 21-81)')
plt.show()

df.to_csv('Diabetes_data.csv', index=False)

